
image: smartapps/bitbucket-pipelines-php-mysql
pipelines:
    default:
        - step:
            # Use this to prepare your build for testing.
            # e.g. copy database configurations, environment variables, etc.
            # Failures in this section will result in build status 'errored'.
            script:
                # Set up WordPress installation.
                - export WP_VERSION=master
                - export WP_MULTISITE=0
                - export WP_DEVELOP_DIR=/tmp/wordpress/
                - mkdir -p $WP_DEVELOP_DIR
                # Use the Git mirror of WordPress.
                - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
                # Set up theme information.
                - theme_slug=$(basename $(pwd))
                - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
                - cd ..
                - mv $theme_slug $theme_dir
                # Set up WordPress configuration.
                - cd $WP_DEVELOP_DIR
                - echo $WP_DEVELOP_DIR
                - cp wp-tests-config-sample.php wp-tests-config.php
                - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
                - sed -i "s/yourusernamehere/root/" wp-tests-config.php
                - sed -i "s/yourpasswordhere//" wp-tests-config.php
                # Create WordPress database.
                - service mysql start
                - mysql -h localhost -u root -proot -e "CREATE DATABASE wordpress_test;"
                # Install CodeSniffer for WordPress Coding Standards checks.
                - mkdir php-codesniffer && curl -L https://github.com/squizlabs/PHP_CodeSniffer/archive/master.tar.gz | tar xz --strip-components=1 -C php-codesniffer
                # Install WordPress Coding Standards.
                - mkdir wordpress-coding-standards && curl -L https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/master.tar.gz | tar xz --strip-components=1 -C wordpress-coding-standards
                # Hop into CodeSniffer directory.
                - cd php-codesniffer
                # Set install path for WordPress Coding Standards
                # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
                - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
                # Hop into themes directory.
                - cd $theme_dir
                # After CodeSniffer install you should refresh your path.
                # - phpenv rehash
                # Install JSCS: JavaScript Code Style checker
                # @link http://jscs.info/
                - npm install -g jscs
                # Install JSHint, a JavaScript Code Quality Tool
                # @link http://jshint.com/docs/
                - npm install -g jshint
                #- wget https://develop.svn.wordpress.org/trunk/.jshintrc
                # Search theme for PHP syntax errors.
                - find . \( -name '*.php' \) -exec php -lf {} \;
                # Run the theme through JSHint
                - jshint .
                # Run the theme through JavaScript Code Style checker
                - jscs .
                # WordPress Coding Standards
                # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
                # @link http://pear.php.net/package/PHP_CodeSniffer/
                # -p flag: Show progress of the run.
                # -s flag: Show sniff codes in all reports.
                # -v flag: Print verbose output.
                # -n flag: Do not print warnings (shortcut for --warning-severity=0)
                # --standard: Use WordPress as the standard.
                # --extensions: Only sniff PHP files.
                - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php
